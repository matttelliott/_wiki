#!/bin/bash

# Universal Claude Agent Finder & Launcher
# Searches for Claude agents in multiple locations and presents a unified menu

# Colors for better UI
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Agent search locations (in priority order)
SEARCH_PATHS=(
    "./_agents"                           # Current project agents
    "./.claude/agents"                    # Claude project config
    "$PWD/_agents"                        # Explicit current directory
    "$HOME/.claude/agents"                # User global agents
    "$HOME/.config/claude/agents"        # XDG config location
    "$HOME/_wiki/_agents"                # Wiki agents
    "$HOME/dotfiles/claude/agents"       # Dotfiles agents
)

# File patterns that indicate Claude agents
AGENT_PATTERNS=(
    "*-agent.md"
    "*.agent.md"
    "agent-*.md"
    "*.claude.md"
    "*.agent"
)

# Function to display the header
show_header() {
    clear
    echo -e "${CYAN}${BOLD}"
    echo "╔════════════════════════════════════════╗"
    echo "║     Claude Agent Finder 🔍🤖         ║"
    echo "╚════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Function to extract agent description from file
get_agent_description() {
    local file=$1
    # Try multiple patterns to find agent description
    local desc=$(grep -m 1 -A 1 "^##* *\(Agent Identity\|Purpose\|Description\)" "$file" 2>/dev/null | tail -1 | sed 's/^[# *]*//' | sed 's/^You are //')
    
    if [ -z "$desc" ] || [[ "$desc" =~ ^(Agent|Purpose|Description|Identity) ]]; then
        # Try to get first meaningful line
        desc=$(grep -v "^#\|^$\|^---\|^```" "$file" 2>/dev/null | head -1 | cut -c1-60)
    fi
    
    if [ -z "$desc" ]; then
        desc="No description available"
    fi
    
    echo "$desc" | cut -c1-60
}

# Function to find all agent files
find_agents() {
    local found_agents=()
    local found_paths=()
    local seen_files=()
    
    # Search each location
    for search_path in "${SEARCH_PATHS[@]}"; do
        # Expand ~ to home directory
        search_path="${search_path/#\~/$HOME}"
        
        if [ -d "$search_path" ]; then
            # Search for each pattern
            for pattern in "${AGENT_PATTERNS[@]}"; do
                while IFS= read -r file; do
                    # Get just the filename for deduplication
                    filename=$(basename "$file")
                    
                    # Check if we've seen this file before (by name)
                    if [[ ! " ${seen_files[@]} " =~ " ${filename} " ]]; then
                        found_agents+=("$file")
                        found_paths+=("$search_path")
                        seen_files+=("$filename")
                    fi
                done < <(find "$search_path" -maxdepth 2 -type f -name "$pattern" 2>/dev/null)
            done
        fi
    done
    
    echo "${found_agents[@]}"
}

# Function to categorize agent by location
get_location_label() {
    local path=$1
    
    case "$path" in
        "./_agents"|"./.claude/agents"|"$PWD"*)
            echo "PROJECT"
            ;;
        "$HOME/.claude/agents"|"$HOME/.config/claude/agents")
            echo "GLOBAL"
            ;;
        "$HOME/_wiki/_agents")
            echo "WIKI"
            ;;
        "$HOME/dotfiles"*)
            echo "DOTFILES"
            ;;
        *)
            echo "OTHER"
            ;;
    esac
}

# Function to list and select agents
select_agent() {
    show_header
    
    echo -e "${YELLOW}Searching for agents...${NC}\n"
    
    # Find all agents
    agents_string=$(find_agents)
    IFS=' ' read -r -a agents <<< "$agents_string"
    
    if [ ${#agents[@]} -eq 0 ]; then
        echo -e "${RED}No agents found!${NC}\n"
        echo "Searched locations:"
        for path in "${SEARCH_PATHS[@]}"; do
            path="${path/#\~/$HOME}"
            if [ -d "$path" ]; then
                echo -e "  ${GREEN}✓${NC} $path"
            else
                echo -e "  ${RED}✗${NC} $path"
            fi
        done
        echo ""
        echo "To create agents, add .md files to any of these locations"
        echo "with names like: agent-name.agent.md or name-agent.md"
        exit 1
    fi
    
    echo -e "${GREEN}Found ${#agents[@]} agent(s)${NC}\n"
    
    # Group agents by location
    declare -A agent_groups
    
    for i in "${!agents[@]}"; do
        agent_file="${agents[$i]}"
        agent_dir=$(dirname "$agent_file")
        location_label=$(get_location_label "$agent_dir")
        
        # Store agent index by location
        if [ -z "${agent_groups[$location_label]}" ]; then
            agent_groups[$location_label]="$i"
        else
            agent_groups[$location_label]="${agent_groups[$location_label]} $i"
        fi
    done
    
    # Display agents grouped by location
    agent_count=1
    declare -A agent_numbers
    
    for location in PROJECT GLOBAL WIKI DOTFILES OTHER; do
        if [ -n "${agent_groups[$location]}" ]; then
            case "$location" in
                PROJECT)
                    echo -e "${MAGENTA}▼ Project Agents${NC}"
                    ;;
                GLOBAL)
                    echo -e "${BLUE}▼ Global Agents${NC}"
                    ;;
                WIKI)
                    echo -e "${GREEN}▼ Wiki Agents${NC}"
                    ;;
                DOTFILES)
                    echo -e "${CYAN}▼ Dotfiles Agents${NC}"
                    ;;
                OTHER)
                    echo -e "${YELLOW}▼ Other Agents${NC}"
                    ;;
            esac
            
            for idx in ${agent_groups[$location]}; do
                agent_file="${agents[$idx]}"
                agent_name=$(basename "$agent_file" | sed 's/\.\(agent\|claude\)\.md$//' | sed 's/-agent\.md$//' | sed 's/\.md$//' | sed 's/[-_]/ /g')
                # Capitalize first letter of each word
                agent_name=$(echo "$agent_name" | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2))}1')
                
                desc=$(get_agent_description "$agent_file")
                
                echo -e "  ${GREEN}[$agent_count]${NC} ${BOLD}$agent_name${NC}"
                echo -e "      $desc"
                echo -e "      ${CYAN}📁 $(dirname "$agent_file")${NC}\n"
                
                agent_numbers[$agent_count]=$idx
                ((agent_count++))
            done
            echo ""
        fi
    done
    
    echo -e "${BLUE}[R]${NC} Refresh list"
    echo -e "${BLUE}[P]${NC} Show search paths"
    echo -e "${RED}[Q]${NC} Quit\n"
    
    echo -n "Select agent (1-$((agent_count-1))) or option: "
    read -r choice
    
    case "$choice" in
        [Qq])
            echo "Goodbye! 👋"
            exit 0
            ;;
        [Rr])
            select_agent
            ;;
        [Pp])
            show_search_paths
            ;;
        [1-9]|[1-9][0-9])
            if [ -n "${agent_numbers[$choice]}" ]; then
                idx=${agent_numbers[$choice]}
                launch_agent "${agents[$idx]}"
            else
                echo -e "${RED}Invalid selection${NC}"
                sleep 2
                select_agent
            fi
            ;;
        *)
            echo -e "${RED}Invalid selection${NC}"
            sleep 2
            select_agent
            ;;
    esac
}

# Function to show search paths
show_search_paths() {
    show_header
    echo -e "${YELLOW}Agent Search Paths:${NC}\n"
    
    for path in "${SEARCH_PATHS[@]}"; do
        path="${path/#\~/$HOME}"
        if [ -d "$path" ]; then
            agent_count=$(find "$path" -maxdepth 2 -type f \( -name "*agent*.md" -o -name "*.claude.md" \) 2>/dev/null | wc -l)
            echo -e "${GREEN}✓${NC} $path ${CYAN}($agent_count agents)${NC}"
        else
            echo -e "${RED}✗${NC} $path ${CYAN}(not found)${NC}"
        fi
    done
    
    echo -e "\n${CYAN}File patterns searched:${NC}"
    for pattern in "${AGENT_PATTERNS[@]}"; do
        echo "  • $pattern"
    done
    
    echo -e "\n${YELLOW}To add a new search location:${NC}"
    echo "  Edit this script and add to SEARCH_PATHS array"
    
    echo -e "\nPress Enter to return to menu..."
    read -r
    select_agent
}

# Function to launch selected agent
launch_agent() {
    local agent_file=$1
    local agent_name=$(basename "$agent_file" | sed 's/\.\(agent\|claude\)\.md$//' | sed 's/-agent\.md$//' | sed 's/\.md$//' | sed 's/[-_]/ /g')
    agent_name=$(echo "$agent_name" | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2))}1')
    
    show_header
    echo -e "${GREEN}Launching ${BOLD}$agent_name${NC}${GREEN} agent...${NC}\n"
    echo -e "${CYAN}Loading from: $agent_file${NC}"
    echo -e "${CYAN}The agent's personality and capabilities are now active.${NC}\n"
    sleep 1
    
    # Launch Claude with the agent's system prompt
    claude --append-system-prompt "$(cat "$agent_file")"
}

# Main execution
main() {
    # Quick mode: if argument provided, search for that agent name
    if [ $# -gt 0 ]; then
        search_term="$1"
        echo -e "${YELLOW}Searching for agent: $search_term${NC}"
        
        agents_string=$(find_agents)
        IFS=' ' read -r -a agents <<< "$agents_string"
        
        for agent in "${agents[@]}"; do
            agent_name=$(basename "$agent" | tr '[:upper:]' '[:lower:]' | sed 's/[-_\.]/ /g')
            if [[ "$agent_name" =~ "$search_term" ]]; then
                echo -e "${GREEN}Found matching agent!${NC}"
                launch_agent "$agent"
                exit 0
            fi
        done
        
        echo -e "${RED}No agent found matching: $search_term${NC}"
        echo "Launching menu instead..."
        sleep 1
    fi
    
    select_agent
}

# Run the main function
main "$@"